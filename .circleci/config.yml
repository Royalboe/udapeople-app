version: 2.1

orbs: 
  slack: circleci/slack@4.12.1

defaults: 
  - &nodeImage
    docker:
        - image: circleci/node:13.8.0
  - &awsImage
    docker:
        - image: amazon/aws-cli
  - &ansibleImage
    docker:
        - image: python:3.7-alpine3.16

commands:
  
  install-aws:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            sudo apt install curl unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  
  install-ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible   
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            # sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  trigger_slack_notification:
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  notify_slack_error:
    description: "Send a message in Slack"
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify_slack_success:
    description: "Send a message in Slack"
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack-name:
        default: "frontend-${CIRCLE_WORKFLOW_ID:0:5}"
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.stack-name >>

jobs:
  build-frontend:
    <<: *nodeImage
    steps:
      - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack_success
      - notify_slack_error

  build-backend:
    <<: *nodeImage
    steps:
      - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack_success
      - notify_slack_error

  test-frontend:
    <<: *nodeImage
    steps:
      - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
      - notify_slack_success
      - notify_slack_error
  
  test-backend:
    <<: *nodeImage
    steps:
      - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
      - notify_slack_success
      - notify_slack_error

  scan-frontend:
    <<: *nodeImage
    steps:
      - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
      - notify_slack_success
      - notify_slack_error
    
  scan-backend:
    <<: *nodeImage
    steps:
      - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
      - notify_slack_success
      - notify_slack_error
  
  deploy-infrastructure:
    <<: *awsImage
    steps:
      - checkout
      - run:
          name: Install tar and gzip 
          command: |
            yum update -y
            yum install -y gzip tar
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-royalboe \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeopl=royalboe \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filter Name="tag:Name",Values="backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      
      - run:
          name: check inventory content
          command: cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

      - destroy-environment:
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

      - notify_slack_success
      - notify_slack_error     

  configure-infrastructure:
    <<: *ansibleImage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["40:c5:0a:6b:9a:07:a6:d6:9c:93:24:dd:29:ff:4f:65"]
      - attach_workspace:
          at: ~/
      - run:
          name: check inventory content
          command: cat ~/project/.circleci/ansible/inventory.txt
      
      - run:
          name: Install dependencies (ansible)
          command: apk add --update ansible

      - run:
          name: Install dependencies (openssh)
          command: |
            apk add --update openssh # Install openssh
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend: 
          requires: 
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: main
      - configure-infrastructure:
          requires: [deploy-infrastructure]